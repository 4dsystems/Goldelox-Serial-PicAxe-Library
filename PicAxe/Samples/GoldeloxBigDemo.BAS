'
' Serial 4D Constants, needs to be inserted into your PicAxe Program until such time as PicAxe supports includes
'
symbol hF_BeeP = $FF
symbol lF_BeeP = $DA
symbol hF_blitComtoDisplay = $00
symbol lF_blitComtoDisplay = $0A
symbol hF_charheight = $00
symbol lF_charheight = $01
symbol hF_charwidth = $00
symbol lF_charwidth = $02
symbol hF_gfx_BGcolour = $FF
symbol lF_gfx_BGcolour = $6E
symbol hF_gfx_ChangeColour = $FF
symbol lF_gfx_ChangeColour = $BE
symbol hF_gfx_Circle = $FF
symbol lF_gfx_Circle = $CD
symbol hF_gfx_CircleFilled = $FF
symbol lF_gfx_CircleFilled = $CC
symbol hF_gfx_Clipping = $FF
symbol lF_gfx_Clipping = $6C
symbol hF_gfx_ClipWindow = $FF
symbol lF_gfx_ClipWindow = $BF
symbol hF_gfx_Cls = $FF
symbol lF_gfx_Cls = $D7
symbol hF_gfx_Contrast = $FF
symbol lF_gfx_Contrast = $66
symbol hF_gfx_FrameDelay = $FF
symbol lF_gfx_FrameDelay = $69
symbol hF_gfx_GetPixel = $FF
symbol lF_gfx_GetPixel = $CA
symbol hF_gfx_Line = $FF
symbol lF_gfx_Line = $D2
symbol hF_gfx_LinePattern = $FF
symbol lF_gfx_LinePattern = $65
symbol hF_gfx_LineTo = $FF
symbol lF_gfx_LineTo = $D4
symbol hF_gfx_MoveTo = $FF
symbol lF_gfx_MoveTo = $D6
symbol hF_gfx_Orbit = $00
symbol lF_gfx_Orbit = $03
symbol hF_gfx_OutlineColour = $FF
symbol lF_gfx_OutlineColour = $67
symbol hF_gfx_Polygon = $00
symbol lF_gfx_Polygon = $04
symbol hF_gfx_Polyline = $00
symbol lF_gfx_Polyline = $05
symbol hF_gfx_PutPixel = $FF
symbol lF_gfx_PutPixel = $CB
symbol hF_gfx_Rectangle = $FF
symbol lF_gfx_Rectangle = $CF
symbol hF_gfx_RectangleFilled = $FF
symbol lF_gfx_RectangleFilled = $CE
symbol hF_gfx_ScreenMode = $FF
symbol lF_gfx_ScreenMode = $68
symbol hF_gfx_Set = $FF
symbol lF_gfx_Set = $D8
symbol hF_gfx_SetClipRegion = $FF
symbol lF_gfx_SetClipRegion = $BC
symbol hF_gfx_Transparency = $FF
symbol lF_gfx_Transparency = $6A
symbol hF_gfx_TransparentColour = $FF
symbol lF_gfx_TransparentColour = $6B
symbol hF_gfx_Triangle = $FF
symbol lF_gfx_Triangle = $C9
symbol hF_joystick = $FF
symbol lF_joystick = $D9
symbol hF_media_Flush = $FF
symbol lF_media_Flush = $B2
symbol hF_media_Image = $FF
symbol lF_media_Image = $B3
symbol hF_media_Init = $FF
symbol lF_media_Init = $B1
symbol hF_media_ReadByte = $FF
symbol lF_media_ReadByte = $B7
symbol hF_media_ReadWord = $FF
symbol lF_media_ReadWord = $B6
symbol hF_media_SetAdd = $FF
symbol lF_media_SetAdd = $B9
symbol hF_media_SetSector = $FF
symbol lF_media_SetSector = $B8
symbol hF_media_Video = $FF
symbol lF_media_Video = $BB
symbol hF_media_VideoFrame = $FF
symbol lF_media_VideoFrame = $BA
symbol hF_media_WriteByte = $FF
symbol lF_media_WriteByte = $B5
symbol hF_media_WriteWord = $FF
symbol lF_media_WriteWord = $B4
symbol hF_peekB = $FF
symbol lF_peekB = $F6
symbol hF_peekW = $FF
symbol lF_peekW = $F5
symbol hF_pokeB = $FF
symbol lF_pokeB = $F4
symbol hF_pokeW = $FF
symbol lF_pokeW = $F3
symbol hF_putCH = $FF
symbol lF_putCH = $FE
symbol hF_putstr = $00
symbol lF_putstr = $06
symbol hF_setbaudWait = $00
symbol lF_setbaudWait = $0B
symbol hF_SSMode = $00
symbol lF_SSMode = $0E
symbol hF_SSSpeed = $00
symbol lF_SSSpeed = $0D
symbol hF_SSTimeout = $00
symbol lF_SSTimeout = $0C
symbol hF_sys_GetModel = $00
symbol lF_sys_GetModel = $07
symbol hF_sys_GetPmmC = $00
symbol lF_sys_GetPmmC = $09
symbol hF_sys_GetVersion = $00
symbol lF_sys_GetVersion = $08
symbol hF_txt_Attributes = $FF
symbol lF_txt_Attributes = $72
symbol hF_txt_BGcolour = $FF
symbol lF_txt_BGcolour = $7E
symbol hF_txt_Bold = $FF
symbol lF_txt_Bold = $76
symbol hF_txt_FGcolour = $FF
symbol lF_txt_FGcolour = $7F
symbol hF_txt_FontID = $FF
symbol lF_txt_FontID = $7D
symbol hF_txt_Height = $FF
symbol lF_txt_Height = $7B
symbol hF_txt_Inverse = $FF
symbol lF_txt_Inverse = $74
symbol hF_txt_Italic = $FF
symbol lF_txt_Italic = $75
symbol hF_txt_MoveCursor = $FF
symbol lF_txt_MoveCursor = $E4
symbol hF_txt_Opacity = $FF
symbol lF_txt_Opacity = $77
symbol hF_txt_Set = $FF
symbol lF_txt_Set = $E3
symbol hF_txt_Underline = $FF
symbol lF_txt_Underline = $73
symbol hF_txt_Width = $FF
symbol lF_txt_Width = $7C
symbol hF_txt_Xgap = $FF
symbol lF_txt_Xgap = $7A
symbol hF_txt_Ygap = $FF
symbol lF_txt_Ygap = $79
'
' 4D Constants, needs to be inserted into your PicAxe Program, if you want to use them, until such time as PicAxe supports includes
'
' /*
'     //----------------------------------
'     //   4DGL - GOLDELOX-GFX2 PLATFORM
'     //----------------------------------
' 
' 
' */
' /*
'     System Primitives for 4DGL GOLDELOX GFX2 Platform
' */


' //==============================================//
' // initialization table additional commands     //
' //==============================================//
symbol INIT_TABLE_END         = $FF    ' end of initialization table marker
symbol INIT_TABLE_DELAY       = $FE    ' insert delay value
symbol INIT_TABLE_16BIT_IDX_REG_MODE = $FD    ' 16 bit display index register, renamed from INIT_TABLE_16BIT_INDEX_REG_MODE
symbol INIT_TABLE_8BIT_INDEX_REG_MODE = $FC    ' 8 bit display index register
symbol INIT_TABLE_16BIT_DUMMY_READ = $FB    ' 16 bit display dummy read
symbol INIT_TABLE_PORTRAIT    = $FA    ' initial screen mode requirement
symbol INIT_TABLE_LANDSCAPE   = $F9
symbol INIT_TABLE_PORTRAIT_R  = $F8
symbol INIT_TABLE_LANDSCAPE_R = $F7

' //==============================================//
' // putch, putstr, putnum and print redirection  //
' // constants                                    //
' //==============================================//
symbol APPEND                 = $0000
symbol hCOM0                  = $FF     
symbol lCOM0                  = $04     ' low byte
symbol hTEXT                  = $FF     
symbol lTEXT                  = $08     ' low byte
symbol hMDA                   = $FF     
symbol lMDA                   = $10     ' low byte

' //==============================================//
' // general number formatting constants          //
' // for 'print' and 'putnum'                     //
' //==============================================//
'     // string processing constants
symbol STR                    = $0080  ' display as string
symbol CHR                    = $0081  ' display as single char



'   // binary, no leading zeroes
symbol BIN                    = $0002  ' binary, 16 digits, no leading zeroes
symbol hBIN1                  = $01  ' binary, 1 digit, no leading zeroes
symbol lBIN1                  = $02  ' low byte
symbol hBIN2                  = $02  ' binary, 2 digits, no leading zeroes
symbol lBIN2                  = $02  ' low byte
symbol hBIN3                  = $03  ' binary, 3 digits, no leading zeroes
symbol lBIN3                  = $02  ' low byte
symbol hBIN4                  = $04  ' binary, 4 digits, no leading zeroes
symbol lBIN4                  = $02  ' low byte
symbol hBIN5                  = $05  ' binary, 5 digits, no leading zeroes
symbol lBIN5                  = $02  ' low byte
symbol hBIN6                  = $06  ' binary, 6 digits, no leading zeroes
symbol lBIN6                  = $02  ' low byte
symbol hBIN7                  = $07  ' binary, 7 digits, no leading zeroes
symbol lBIN7                  = $02  ' low byte
symbol hBIN8                  = $08  ' binary, 8 digits, no leading zeroes
symbol lBIN8                  = $02  ' low byte
symbol hBIN9                  = $09  ' binary, 9 digits, no leading zeroes
symbol lBIN9                  = $02  ' low byte
symbol hBIN10                 = $0A  ' binary, 10 digits, no leading zeroes
symbol lBIN10                 = $02  ' low byte
symbol hBIN11                 = $0B  ' binary, 11 digits, no leading zeroes
symbol lBIN11                 = $02  ' low byte
symbol hBIN12                 = $0C  ' binary, 12 digits, no leading zeroes
symbol lBIN12                 = $02  ' low byte
symbol hBIN13                 = $0D  ' binary, 13 digits, no leading zeroes
symbol lBIN13                 = $02  ' low byte
symbol hBIN14                 = $0E  ' binary, 14 digits, no leading zeroes
symbol lBIN14                 = $02  ' low byte
symbol hBIN15                 = $0F  ' binary, 15 digits, no leading zeroes
symbol lBIN15                 = $02  ' low byte
symbol BIN16                  = $0002  ' binary, 16 digits, no leading zeroes

'     // binary, with leading zeroes
symbol hBINZ                  = $10  ' binary, 16 digits, leading zeroes
symbol lBINZ                  = $02  ' low byte
symbol hBIN1Z                 = $11  ' binary, 1 digit, leading zeroes
symbol lBIN1Z                 = $02  ' low byte
symbol hBIN2Z                 = $12  ' binary, 2 digits, leading zeroes
symbol lBIN2Z                 = $02  ' low byte
symbol hBIN3Z                 = $13  ' binary, 3 digits, leading zeroes
symbol lBIN3Z                 = $02  ' low byte
symbol hBIN4Z                 = $14  ' binary, 4 digits, leading zeroes
symbol lBIN4Z                 = $02  ' low byte
symbol hBIN5Z                 = $15  ' binary, 5 digits, leading zeroes
symbol lBIN5Z                 = $02  ' low byte
symbol hBIN6Z                 = $16  ' binary, 6 digits, leading zeroes
symbol lBIN6Z                 = $02  ' low byte
symbol hBIN7Z                 = $17  ' binary, 7 digits, leading zeroes
symbol lBIN7Z                 = $02  ' low byte
symbol hBIN8Z                 = $18  ' binary, 8 digits, leading zeroes
symbol lBIN8Z                 = $02  ' low byte
symbol hBIN9Z                 = $19  ' binary, 9 digits, leading zeroes
symbol lBIN9Z                 = $02  ' low byte
symbol hBIN10Z                = $1A  ' binary, 10 digits, leading zeroes
symbol lBIN10Z                = $02  ' low byte
symbol hBIN11Z                = $1B  ' binary, 11 digits, leading zeroes
symbol lBIN11Z                = $02  ' low byte
symbol hBIN12Z                = $1C  ' binary, 12 digits, leading zeroes
symbol lBIN12Z                = $02  ' low byte
symbol hBIN13Z                = $1D  ' binary, 13 digits, leading zeroes
symbol lBIN13Z                = $02  ' low byte
symbol hBIN14Z                = $1E  ' binary, 14 digits, leading zeroes
symbol lBIN14Z                = $02  ' low byte
symbol hBIN15Z                = $1F  ' binary, 15 digits, leading zeroes
symbol lBIN15Z                = $02  ' low byte
symbol hBIN16Z                = $10  ' binary, 16 digits, leading zeroes
symbol lBIN16Z                = $02  ' low byte

'     // binary, with leading blanked
symbol hBINZB                 = $20  ' binary, 16 digits, leading blanks
symbol lBINZB                 = $02  ' low byte
symbol hBIN1ZB                = $21  ' binary, 1 digit, leading blanks
symbol lBIN1ZB                = $02  ' low byte
symbol hBIN2ZB                = $22  ' binary, 2 digits, leading blanks
symbol lBIN2ZB                = $02  ' low byte
symbol hBIN3ZB                = $23  ' binary, 3 digits, leading blanks
symbol lBIN3ZB                = $02  ' low byte
symbol hBIN4ZB                = $24  ' binary, 4 digits, leading blanks
symbol lBIN4ZB                = $02  ' low byte
symbol hBIN5ZB                = $25  ' binary, 5 digits, leading blanks
symbol lBIN5ZB                = $02  ' low byte
symbol hBIN6ZB                = $26  ' binary, 6 digits, leading blanks
symbol lBIN6ZB                = $02  ' low byte
symbol hBIN7ZB                = $27  ' binary, 7 digits, leading blanks
symbol lBIN7ZB                = $02  ' low byte
symbol hBIN8ZB                = $28  ' binary, 8 digits, leading blanks
symbol lBIN8ZB                = $02  ' low byte
symbol hBIN9ZB                = $29  ' binary, 9 digits, leading blanks
symbol lBIN9ZB                = $02  ' low byte
symbol hBIN10ZB               = $2A  ' binary, 10 digits, leading blanks
symbol lBIN10ZB               = $02  ' low byte
symbol hBIN11ZB               = $2B  ' binary, 11 digits, leading blanks
symbol lBIN11ZB               = $02  ' low byte
symbol hBIN12ZB               = $2C  ' binary, 12 digits, leading blanks
symbol lBIN12ZB               = $02  ' low byte
symbol hBIN13ZB               = $2D  ' binary, 13 digits, leading blanks
symbol lBIN13ZB               = $02  ' low byte
symbol hBIN14ZB               = $2E  ' binary, 14 digits, leading blanks
symbol lBIN14ZB               = $02  ' low byte
symbol hBIN15ZB               = $2F  ' binary, 15 digits, leading blanks
symbol lBIN15ZB               = $02  ' low byte
symbol hBIN16ZB               = $20  ' binary, 16 digits, leading blanks
symbol lBIN16ZB               = $02  ' low byte

'     // signed decimal, no leading zeroes
symbol hDEC                   = $05  ' signed decimal, 5 digits, no leading zeroes
symbol lDEC                   = $0A  ' low byte
symbol hDEC1                  = $01  ' signed decimal, 1 digit, no leading zeroes
symbol lDEC1                  = $0A  ' low byte
symbol hDEC2                  = $02  ' signed decimal, 2 digits, no leading zeroes
symbol lDEC2                  = $0A  ' low byte
symbol hDEC3                  = $03  ' signed decimal, 3 digits, no leading zeroes
symbol lDEC3                  = $0A  ' low byte
symbol hDEC4                  = $04  ' signed decimal, 4 digits, no leading zeroes
symbol lDEC4                  = $0A  ' low byte
symbol hDEC5                  = $05  ' signed decimal, 5 digits, no leading zeroes
symbol lDEC5                  = $0A  ' low byte

'     // signed decimal, with leading zeroes
symbol hDECZ                  = $15  ' signed decimal, 5 digits, leading zeroes
symbol lDECZ                  = $0A  ' low byte
symbol hDEC1Z                 = $11  ' signed decimal, 1 digit, leading zeroes
symbol lDEC1Z                 = $0A  ' low byte
symbol hDEC2Z                 = $12  ' signed decimal, 2 digits, leading zeroes
symbol lDEC2Z                 = $0A  ' low byte
symbol hDEC3Z                 = $13  ' signed decimal, 3 digits, leading zeroes
symbol lDEC3Z                 = $0A  ' low byte
symbol hDEC4Z                 = $14  ' signed decimal, 4 digits, leading zeroes
symbol lDEC4Z                 = $0A  ' low byte
symbol hDEC5Z                 = $15  ' signed decimal, 5 digits, leading zeroes
symbol lDEC5Z                 = $0A  ' low byte

'   // signed decimal, leading zeroes blanked
symbol hDECZB                 = $25  ' signed decimal, 5 digits, leading blanks
symbol lDECZB                 = $0A  ' low byte
symbol hDEC1ZB                = $21  ' signed decimal, 1 digit, leading blanks
symbol lDEC1ZB                = $0A  ' low byte
symbol hDEC2ZB                = $22  ' signed decimal, 2 digits, leading blanks
symbol lDEC2ZB                = $0A  ' low byte
symbol hDEC3ZB                = $23  ' signed decimal, 3 digits, leading blanks
symbol lDEC3ZB                = $0A  ' low byte
symbol hDEC4ZB                = $24  ' signed decimal, 4 digits, leading blanks
symbol lDEC4ZB                = $0A  ' low byte
symbol hDEC5ZB                = $25  ' signed decimal, 5 digits, leading blanks
symbol lDEC5ZB                = $0A  ' low byte

'     // unsigned decimal, no leading zeroes
symbol hUDEC                  = $45  ' unsigned decimal, 5 digits, no leading zeroes
symbol lUDEC                  = $0A  ' low byte
symbol hUDEC1                 = $41  ' unsigned decimal, 1 digit, no leading zeroes
symbol lUDEC1                 = $0A  ' low byte
symbol hUDEC2                 = $42  ' unsigned decimal, 2 digits, no leading zeroes
symbol lUDEC2                 = $0A  ' low byte
symbol hUDEC3                 = $43  ' unsigned decimal, 3 digits, no leading zeroes
symbol lUDEC3                 = $0A  ' low byte
symbol hUDEC4                 = $44  ' unsigned decimal, 4 digits, no leading zeroes
symbol lUDEC4                 = $0A  ' low byte
symbol hUDEC5                 = $45  ' unsigned decimal, 5 digits, no leading zeroes
symbol lUDEC5                 = $0A  ' low byte

'     // unsigned decimal, with leading zero's
symbol hUDECZ                 = $55  ' unsigned decimal, 5 digits, leading zeroes
symbol lUDECZ                 = $0A  ' low byte
symbol hUDEC1Z                = $51  ' unsigned decimal, 1 digit, leading zeroes
symbol lUDEC1Z                = $0A  ' low byte
symbol hUDEC2Z                = $52  ' unsigned decimal, 2 digits, leading zeroes
symbol lUDEC2Z                = $0A  ' low byte
symbol hUDEC3Z                = $53  ' unsigned decimal, 3 digits, leading zeroes
symbol lUDEC3Z                = $0A  ' low byte
symbol hUDEC4Z                = $54  ' unsigned decimal, 4 digits, leading zeroes
symbol lUDEC4Z                = $0A  ' low byte
symbol hUDEC5Z                = $55  ' unsigned decimal, 5 digits, leading zeroes
symbol lUDEC5Z                = $0A  ' low byte

'     // unsigned decimal, leading zeroes blanked
symbol hUDECZB                = $65  ' unsigned decimal, 5 digits, leading blanks
symbol lUDECZB                = $0A  ' low byte
symbol hUDEC1ZB               = $61  ' unsigned decimal, 1 digit, leading blanks
symbol lUDEC1ZB               = $0A  ' low byte
symbol hUDEC2ZB               = $62  ' unsigned decimal, 2 digits, leading blanks
symbol lUDEC2ZB               = $0A  ' low byte
symbol hUDEC3ZB               = $63  ' unsigned decimal, 3 digits, leading blanks
symbol lUDEC3ZB               = $0A  ' low byte
symbol hUDEC4ZB               = $64  ' unsigned decimal, 4 digits, leading blanks
symbol lUDEC4ZB               = $0A  ' low byte
symbol hUDEC5ZB               = $65  ' unsigned decimal, 5 digits, leading blanks
symbol lUDEC5ZB               = $0A  ' low byte

'     // hex, with leading zero's
symbol hHEX                   = $14  ' hex, 4 digits, leading zeroes
symbol lHEX                   = $10  ' low byte
symbol hHEX1                  = $11  ' hex, 1 digit, leading zeroes
symbol lHEX1                  = $10  ' low byte
symbol hHEX2                  = $12  ' hex, 2 digits, leading zeroes
symbol lHEX2                  = $10  ' low byte
symbol hHEX3                  = $13  ' hex, 3 digits, leading zeroes
symbol lHEX3                  = $10  ' low byte
symbol hHEX4                  = $14  ' hex, 4 digits, leading zeroes
symbol lHEX4                  = $10  ' low byte

'     // hex, no leading zero's
symbol hHEXZ                  = $04  ' hex, 4 digits, no leading zeroes
symbol lHEXZ                  = $10  ' low byte
symbol hHEX1Z                 = $01  ' hex, 1 digit, no leading zeroes
symbol lHEX1Z                 = $10  ' low byte
symbol hHEX2Z                 = $02  ' hex, 2 digits, no leading zeroes
symbol lHEX2Z                 = $10  ' low byte
symbol hHEX3Z                 = $03  ' hex, 3 digits, no leading zeroes
symbol lHEX3Z                 = $10  ' low byte
symbol hHEX4Z                 = $04  ' hex, 4 digits, no leading zeroes
symbol lHEX4Z                 = $10  ' low byte

'     // hex, leading zero's blanked
symbol hHEXZB                 = $24  ' hex, 4 digits, leading blanks
symbol lHEXZB                 = $10  ' low byte
symbol hHEX1ZB                = $21  ' hex, 1 digit, leading blanks
symbol lHEX1ZB                = $10  ' low byte
symbol hHEX2ZB                = $22  ' hex, 2 digits, leading blanks
symbol lHEX2ZB                = $10  ' low byte
symbol hHEX3ZB                = $23  ' hex, 3 digits, leading blanks
symbol lHEX3ZB                = $10  ' low byte
symbol hHEX4ZB                = $24  ' hex, 4 digits, leading blanks
symbol lHEX4ZB                = $10  ' low byte

' // baud divisor rates
symbol MIDI                   = 95
symbol hBAUD_110              = $6A     
symbol lBAUD_110              = $87     ' low byte
symbol hBAUD_300              = $27     
symbol lBAUD_300              = $0F     ' low byte
symbol hBAUD_600              = $13     
symbol lBAUD_600              = $87     ' low byte
symbol hBAUD_1200             = $09     
symbol lBAUD_1200             = $C3     ' low byte
symbol hBAUD_2400             = $04     
symbol lBAUD_2400             = $E1     ' low byte
symbol hBAUD_4800             = $02     
symbol lBAUD_4800             = $70     ' low byte
symbol hBAUD_9600             = $01     
symbol lBAUD_9600             = $38     ' low byte
symbol BAUD_14400             = 207
symbol BAUD_19200             = 155
symbol BAUD_31250             = 95
symbol BAUD_38400             = 77
symbol BAUD_56000             = 53
symbol BAUD_57600             = 51
symbol BAUD_115200            = 25
symbol BAUD_128000            = 22
symbol BAUD_256000            = 11
symbol BAUD_300000            = 10
symbol BAUD_375000            = 8
symbol BAUD_500000            = 6
symbol BAUD_600000            = 4


' //==============================================//
' // generic constants                            //
' //==============================================//
symbol ENABLE                 = 1
symbol DISABLE                = 0
symbol ON4D                   = 1
symbol OFF4D                  = 0
symbol TRUE                   = 1
symbol FALSE                  = 0

' //==============================================//
' // joystick() function return constants         //
' //==============================================//
symbol RELEASED               = 0
symbol UP                     = 1
symbol LEFT                   = 2
symbol DOWN                   = 3
symbol RIGHT                  = 4
symbol FIRE                   = 5

' //==============================================//
' // spi_Init(...)  mode arguments                //
' //==============================================//
symbol SPI_SLOW               = 2       ' 750khz
symbol SPI_MED                = 1       ' 3mhz
symbol SPI_FAST               = 0       ' 12mhz
symbol RXMODE_0               = 0       ' receive sample pos
symbol RXMODE_1               = 1       ' receive sample pos
symbol CKMODE_0               = 0       ' transmit sample pos
symbol CKMODE_1               = 1       ' transmit sample pos
symbol CKMODE_2               = 2       ' transmit sample pos
symbol CKMODE_3               = 3       ' transmit sample pos

' //==============================================//
' //Pin related constants                         //
' //==============================================//
symbol IO1                    = 0
symbol IO2                    = 1
symbol LO                     = 0
symbol HI                     = 1
symbol OUTPUT4D               = 0
symbol INPUT4D                = 1
symbol ANALOGUE_8             = 2
symbol ANALOGUE_10            = 3
symbol ONEWIRE                = 4
symbol SOUND4D                = 5

' //==============================================//
' //gfx_Set() related constants                   //
' //==============================================//
symbol PEN_SIZE               = 0       ' not necessary to use (legacy mode)
symbol BACKGROUND_COLOUR      = 1       ' screen background colour
symbol OBJECT_COLOUR          = 2       ' line / circle / rectangle generic colour
symbol CLIPPING               = 3       ' clipping ON / OFF
symbol TRANSPARENT_COLOUR     = 4       ' (only on displays with specific hware feature)
symbol TRANSPARENCY           = 5       ' 0 = OFF, 1 = ON (only on displays with specific hware feature)
symbol FRAME_DELAY            = 6       ' legacy mode, see pokeB(IMAGE_DELAY, n);
symbol SCREEN_MODE            = 7       ' LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
symbol OUTLINE_COLOUR         = 8       ' if not BLACK (0) , used for outline around circles and rectanglse
symbol CONTRAST               = 9       ' set contrast ratuio in uOLED modules
symbol LINE_PATTERN           = 10      ' used for patterned lines, 16bit value (0 = no pattern)
symbol COLOUR_MODE            = 11      ' select 8 or 16 bit colour mode


symbol SOLID                  = 0       ' PEN_SIZE argument  (gfx_Set legacy mode)
symbol OUTLINE                = 1       ' PEN_SIZE argument  (gfx_Set legacy mode)

symbol LANDSCAPE              = 0       ' SCREEN_MODE (north)
symbol LANDSCAPE_R            = 1       ' SCREEN_MODE (south)
symbol PORTRAIT               = 2       ' SCREEN_MODE (west)
symbol PORTRAIT_R             = 3       ' SCREEN_MODE (east)

symbol COLOUR8                = 1       ' COLOUR_MODE 8 bit colour mode
symbol COLOUR16               = 0       ' COLOUR_MODE 16 bit colour mode

' //==============================================//
' //txt_Set() related constants                   //
' //==============================================//
symbol TEXT_COLOUR            = 0       ' text foreground colr
symbol TEXT_HIGHLIGHT         = 1       ' text background colr
symbol FONT_ID                = 2       ' default 0, else points to data statement font
symbol TEXT_WIDTH             = 3       ' text width multiplier
symbol TEXT_HEIGHT            = 4       ' text height multiplier
symbol TEXT_XGAP              = 5       ' horizontal text gap (default 1)
symbol TEXT_YGAP              = 6       ' vertical text gap (default 1)
symbol TEXT_PRINTDELAY        = 7       ' for 'teletype' like effect when pronting
symbol TEXT_OPACITY           = 8       ' text mode flag, TRANSPARENT or OPAQUE
symbol TEXT_BOLD              = 9       ' embolden text (auto reset) - legacy
symbol TEXT_ITALIC            = 10      ' italicize text (auto reset)
symbol TEXT_INVERSE           = 11      ' invert text (auto reset)
symbol TEXT_UNDERLINED        = 12      ' underline text (auto reset)
symbol TEXT_ATTRIBUTES        = 13      ' controls BOLD/ITALIC/INVERSE/UNDERLINE simultaneously

' //==============================================//
' //txt_Set() related arguments                   //
' //==============================================//
symbol SYSTEM                 = 0       ' internal system font
symbol MEDIA                  = 7       ' font is at uSD_add


symbol TRANSPARENT            = 0       ' TEXT_OPACITY  transparent  text
symbol OPAQUE                 = 1       ' TEXT_OPACITY  opaque text

symbol BOLD                   = 16      ' TEXT_ATTRIBUTES bold text (auto reset)
symbol ITALIC                 = 32      ' TEXT_ATTRIBUTES italic text (auto reset)
symbol INVERSE                = 64      ' TEXT_ATTRIBUTES inverse text (auto reset)
symbol UNDERLINED             = 128     ' TEXT_ATTRIBUTES underlined text (auto reset)


' //==============================================//
' // Memory MAP                                   //
' // system BYTE variables accesible with         //
' // peekB and pokeB                              //
' //==============================================//
symbol VX1                    = 128     ' display hardware x1 pos
symbol VY1                    = 129     ' display hardware y1 pos
symbol VX2                    = 130     ' display hardware x2 pos
symbol VY2                    = 131     ' display hardware y2 pos
symbol SYS_X_MAX              = 132     ' display hardware X res-1
symbol SYS_Y_MAX              = 133     ' display hardware Y res-1
symbol WRITE_GRAM_REG         = 134     ' device register address for write operation
symbol READ_GRAM_REG          = 135     ' device register address for write operation
symbol IMAGE_WIDTH            = 136     ' width of currently loaded image
symbol IMAGE_HEIGHT           = 137     ' height of currently loaded image
symbol IMAGE_DELAY            = 138     ' 0 if image, else inter frame delay for movie
symbol IMAGE_MODE             = 139     ' bit 4 determines colr mode, other bits reserved
symbol CLIP_LEFT_POS          = 140     ' left clipping point (set with gfx_ClipWindow(...)
symbol CLIP_TOP_POS           = 141     ' top clipping point (set with gfx_ClipWindow(...)
symbol CLIP_RIGHT_POS         = 142     ' right clipping point (set with gfx_ClipWindow(...)
symbol CLIP_BOTTOM_POS        = 143     ' bottom clipping point (set with gfx_ClipWindow(...)
symbol CLIP_LEFT              = 144     ' current clip value (reads as full size if clipping turned off)
symbol CLIP_TOP               = 145     ' current clip value (reads as full size if clipping turned off)
symbol CLIP_RIGHT             = 146     ' current clip value (reads as full size if clipping turned off)
symbol CLIP_BOTTOM            = 147     ' current clip value (reads full size if clipping turned off)
symbol FONT_TYPE              = 148     ' font type, 0 = system font, else pointer to user or media font
symbol FONT_MAX               = 149     ' number of chars in current font
symbol FONT_OFFSET            = 150     ' starting offset (normally 0x20)
symbol FONT_WIDTH             = 151     ' current font width
symbol FONT_HEIGHT            = 152     ' current font height
symbol TEXT_XMAG              = 153     ' text width magnification
symbol TEXT_YMAG              = 154     ' text height magnification
symbol TEXT_MARGIN            = 155     ' left column for carriage return
symbol TEXT_DELAY             = 156     ' print delay
symbol TEXT_X_GAP             = 157     ' text horizontal gap size
symbol TEXT_Y_GAP             = 158     ' text vertical gap size
symbol GFX_XMAX               = 159     ' current display width-1 determined by portrait / landscape swapping
symbol GFX_YMAX               = 160     ' current display width-1 determined by portrait / landscape swapping
symbol GFX_SCREENMODE         = 161     ' holds current screen mode
'     //


' //==============================================//
' // system WORD variables accesible with peekW   //
' // and pokeW or pointer access                  //
' //==============================================//
symbol VM_OVERFLOW            = 83      ' 16bit overflow of 32bit results (see OVF() funtion)
symbol VM_COLOUR              = 84      ' general working var for colour
symbol VM_RETVAL              = 85      ' last value returned from any function
symbol GFX_BACK_COLOUR        = 86      ' screen background colour
symbol GFX_OBJECT_COLOUR      = 87      ' graphics object colour
symbol GFX_TEXT_COLOUR        = 88      ' text forground colour
symbol GFX_TEXT_BGCOLOUR      = 89      ' text background colour
symbol GFX_OUTLINE_COLOUR     = 90      ' screen background colour
symbol GFX_LINE_PATTERN       = 91      ' line draw 16bit linear pattern
symbol IMG_PIXEL_COUNT        = 92      ' pixel count of current object (may be altered by clipping)
symbol IMG_FRAME_COUNT        = 93      ' count of frames in currently loaded video
symbol MEDIA_HEAD             = 94      ' media sector head position
symbol SYS_OSTREAM            = 95      ' system output redirection
symbol GFX_LEFT               = 96      ' virtual left point for current image
symbol GFX_TOP                = 97      ' virtual top point for current image
symbol GFX_RIGHT              = 98      ' virtual right point for current image
symbol GFX_BOTTOM             = 99      ' virtual bottom point for current image
symbol GFX_X1                 = 100     ' clipped left point for current image
symbol GFX_Y1                 = 101     ' clipped top point for current image
symbol GFX_X2                 = 102     ' clipped right point for current image
symbol GFX_Y2                 = 103     ' clipped bottom point for current image
symbol GFX_X_ORG              = 104     ' current Y origin
symbol GFX_Y_ORG              = 105     ' current Y origin
symbol RANDOM_LO              = 106     ' random number generator LO word
symbol RANDOM_HI              = 107     ' random number generator LO word
symbol MEDIA_ADDR_LO          = 108     ' uSD/FLASH absolute byte address LO
symbol MEDIA_ADDR_HI          = 109     ' uSD/FLASH absolute byte address HI
symbol SECTOR_ADDR_LO         = 110     ' uSD/FLASH sector address LO
symbol SECTOR_ADDR_HI         = 111     ' uSD/FLASH sector address HI
symbol SYSTEM_TIMER_LO        = 112     ' 1msec 32 bit free running timer LO word
symbol SYSTEM_TIMER_HI        = 113     ' 1msec 32 bit free running timer HI word
symbol TIMER0                 = 114     ' user timer0
symbol TIMER1                 = 115     ' user timer1
symbol TIMER2                 = 116     ' user timer2
symbol TIMER3                 = 117     ' user timer3 (10msec resolution)
symbol INCVAL                 = 118     ' incrementer size
symbol TEMP_MEDIA_ADDRLO      = 119     ' temp stroage while printing font from media storage
symbol TEMP_MEDIA_ADDRHI      = 120     ' temp stroage while printing font from media storage
symbol GFX_TRANSPARENTCOLOUR  = 121     ' image transparency colour
symbol GFX_STRINGMETRIX       = 122     ' low byte = string width, hi byte = string height
symbol GFX_TEMPSTORE1         = 123     ' low byte = last char printed, hi byte = frame timer over-ride
'     // reserved                 124             // internal use
'     // reserved                 125             // internal use
symbol SYS_FLAGS1             = 126     ' system control flags word 1
symbol SYS_FLAGS2             = 127     ' system control flags word 2

' //==============================================//
' // bit constants for SYS_FLAGS1                 //
' //==============================================//
symbol _STREAMLOCK            = $0001  ' Used internally
symbol _PENSIZE               = $0002  ' object, 0=solid,1=outline
symbol _OPACITY               = $0004  ' text, 0=transparent,1=opaque
symbol _OUTLINED              = $0008  ' box/circle outline 0=off,1=on
symbol _BOLD                  = $0010  ' text, 0=normal,1=bold (auto reset)
symbol _ITALIC                = $0020  ' Text, 0=normal,1=italic (auto reset)
symbol _INVERSE               = $0040  ' Text, 0=normal,1=inverse (auto reset)
symbol _UNDERLINED            = $0080  ' Text, 0=normal,1=underlined (auto reset)
symbol h_CLIPPING             = $01  ' Used internally, 0-clipping off, 1-clipping on
symbol l_CLIPPING             = $00  ' low byte
symbol h_STRMODE              = $02  ' Used internally
symbol l_STRMODE              = $00  ' low byte
symbol h_SERMODE              = $04  ' Used internally
symbol l_SERMODE              = $00  ' low byte
symbol h_TXTMODE              = $08  ' Used internally
symbol l_TXTMODE              = $00  ' low byte
symbol h_MEDIAMODE            = $10  ' Used internally
symbol l_MEDIAMODE            = $00  ' low byte
symbol h_PATTERNED            = $20  ' Used internally
symbol l_PATTERNED            = $00  ' low byte
symbol h_COLOUR8              = $40  ' Display mode, 0=16bit, 1=8bit
symbol l_COLOUR8              = $00  ' low byte
symbol h_MEDIAFONT            = $80  ' 0=internal font, 1=media font
symbol l_MEDIAFONT            = $00  ' low byte

' //==============================================//
' // bit constants for SYS_FLAGS2                 //
' //==============================================//
symbol _MEDIA_INSTALLED       = $0001  ' SD of FLASH device is installed
symbol _MEDIA_TYPE            = $0002  ' 0=SD, 1=FLASH media device detected
symbol _MEDIA_READ            = $0004  ' 1=MEDIA read in progress
symbol _MEDIA_WRITE           = $0008  ' 1=MEDIA write in progress
symbol _OW_PIN                = $0010  ' 0=IO1, 1=IO2 (Dallas OW Pin)
symbol _PTR_TYPE              = $0020  ' Used internally
symbol _TEMP1                 = $0040  ' Used internally
symbol _TEMP2                 = $0080  ' Used internally
symbol h_RUNMODE              = $01  ' 1=running pcode from media
symbol l_RUNMODE              = $00  ' low byte
symbol h_SIGNED               = $02  ' 0=number printed '-' prepend
symbol l_SIGNED               = $00  ' low byte
symbol h_RUNFLAG              = $04  ' 1=EVE processor is running    SYSTEM
symbol l_RUNFLAG              = $00  ' low byte
symbol h_SINGLESTEP           = $08  ' 1=set breakpoint for debugger
symbol l_SINGLESTEP           = $00  ' low byte
symbol h_COMMINT              = $10  ' 1=buffered comms active
symbol l_COMMINT              = $00  ' low byte
symbol h_DUMMY16              = $20  ' 1=display needs 16bit dummy
symbol l_DUMMY16              = $00  ' low byte
symbol h_DISP16               = $40  ' 1=display is 16bit interface
symbol l_DISP16               = $00  ' low byte
symbol h_PROPFONT             = $80  ' 1=current font is proportional
symbol l_PROPFONT             = $00  ' low byte


' //==============================================//
' // EVE User Resources                           //
' //==============================================//
symbol USR_SP                 = 128     ' EVE user defined stack pointer
symbol USRVARS                = 129     ' EVE user variables VARS[255]
symbol hUSRSTACK              = $01     ' EVE machine stack STACK[128]
symbol lUSRSTACK              = $80     ' low byte

' //------------------------------------------------------------------------------
' //------------------------------------------------------------------------------
' //------------------------------------------------------------------------------
' //------------------------------------------------------------------------------
' //------------------------------------------------------------------------------

' /*
'     16 bit RGB (565) Colour Chart
'     Original work by 4D Forum Member: skadoo
' */



symbol hALICEBLUE             = $F7     
symbol lALICEBLUE             = $DF     ' low byte
symbol hANTIQUEWHITE          = $FF     
symbol lANTIQUEWHITE          = $5A     ' low byte
symbol hAQUA                  = $07     
symbol lAQUA                  = $FF     ' low byte
symbol hAQUAMARINE            = $7F     
symbol lAQUAMARINE            = $FA     ' low byte
symbol hAZURE                 = $F7     
symbol lAZURE                 = $FF     ' low byte
symbol hBEIGE                 = $F7     
symbol lBEIGE                 = $BB     ' low byte
symbol hBISQUE                = $FF     
symbol lBISQUE                = $38     ' low byte
symbol hBLACK                 = $00     
symbol lBLACK                 = $00     ' low byte
symbol hBLANCHEDALMOND        = $FF     
symbol lBLANCHEDALMOND        = $59     ' low byte
symbol hBLUE                  = $00     
symbol lBLUE                  = $1F     ' low byte
symbol hBLUEVIOLET            = $89     
symbol lBLUEVIOLET            = $5C     ' low byte
symbol hBROWN                 = $A1     
symbol lBROWN                 = $45     ' low byte
symbol hBURLYWOOD             = $DD     
symbol lBURLYWOOD             = $D0     ' low byte
symbol hCADETBLUE             = $5C     
symbol lCADETBLUE             = $F4     ' low byte
symbol hCHARTREUSE            = $7F     
symbol lCHARTREUSE            = $E0     ' low byte
symbol hCHOCOLATE             = $D3     
symbol lCHOCOLATE             = $43     ' low byte
symbol hCORAL                 = $FB     
symbol lCORAL                 = $EA     ' low byte
symbol hCORNFLOWERBLUE        = $64     
symbol lCORNFLOWERBLUE        = $BD     ' low byte
symbol hCORNSILK              = $FF     
symbol lCORNSILK              = $DB     ' low byte
symbol hCRIMSON               = $D8     
symbol lCRIMSON               = $A7     ' low byte
symbol hCYAN                  = $07     
symbol lCYAN                  = $FF     ' low byte
symbol hDARKBLUE              = $00     
symbol lDARKBLUE              = $11     ' low byte
symbol hDARKCYAN              = $04     
symbol lDARKCYAN              = $51     ' low byte
symbol hDARKGOLDENROD         = $BC     
symbol lDARKGOLDENROD         = $21     ' low byte
symbol hDARKGRAY              = $AD     
symbol lDARKGRAY              = $55     ' low byte
symbol hDARKGREEN             = $03     
symbol lDARKGREEN             = $20     ' low byte
symbol hDARKKHAKI             = $BD     
symbol lDARKKHAKI             = $AD     ' low byte
symbol hDARKMAGENTA           = $88     
symbol lDARKMAGENTA           = $11     ' low byte
symbol hDARKOLIVEGREEN        = $53     
symbol lDARKOLIVEGREEN        = $45     ' low byte
symbol hDARKORANGE            = $FC     
symbol lDARKORANGE            = $60     ' low byte
symbol hDARKORCHID            = $99     
symbol lDARKORCHID            = $99     ' low byte
symbol hDARKRED               = $88     
symbol lDARKRED               = $00     ' low byte
symbol hDARKSALMON            = $EC     
symbol lDARKSALMON            = $AF     ' low byte
symbol hDARKSEAGREEN          = $8D     
symbol lDARKSEAGREEN          = $F1     ' low byte
symbol hDARKSLATEBLUE         = $49     
symbol lDARKSLATEBLUE         = $F1     ' low byte
symbol hDARKSLATEGRAY         = $2A     
symbol lDARKSLATEGRAY         = $69     ' low byte
symbol hDARKTURQUOISE         = $06     
symbol lDARKTURQUOISE         = $7A     ' low byte
symbol hDARKVIOLET            = $90     
symbol lDARKVIOLET            = $1A     ' low byte
symbol hDEEPPINK              = $F8     
symbol lDEEPPINK              = $B2     ' low byte
symbol hDEEPSKYBLUE           = $05     
symbol lDEEPSKYBLUE           = $FF     ' low byte
symbol hDIMGRAY               = $6B     
symbol lDIMGRAY               = $4D     ' low byte
symbol hDODGERBLUE            = $1C     
symbol lDODGERBLUE            = $9F     ' low byte
symbol hFIREBRICK             = $B1     
symbol lFIREBRICK             = $04     ' low byte
symbol hFLORALWHITE           = $FF     
symbol lFLORALWHITE           = $DE     ' low byte
symbol hFORESTGREEN           = $24     
symbol lFORESTGREEN           = $44     ' low byte
symbol hFUCHSIA               = $F8     
symbol lFUCHSIA               = $1F     ' low byte
symbol hGAINSBORO             = $DE     
symbol lGAINSBORO             = $FB     ' low byte
symbol hGHOSTWHITE            = $FF     
symbol lGHOSTWHITE            = $DF     ' low byte
symbol hGOLD                  = $FE     
symbol lGOLD                  = $A0     ' low byte
symbol hGOLDENROD             = $DD     
symbol lGOLDENROD             = $24     ' low byte
symbol hGRAY                  = $84     
symbol lGRAY                  = $10     ' low byte
symbol hGREEN                 = $04     
symbol lGREEN                 = $00     ' low byte
symbol hGREENYELLOW           = $AF     
symbol lGREENYELLOW           = $E5     ' low byte
symbol hHONEYDEW              = $F7     
symbol lHONEYDEW              = $FE     ' low byte
symbol hHOTPINK               = $FB     
symbol lHOTPINK               = $56     ' low byte
symbol hINDIANRED             = $CA     
symbol lINDIANRED             = $EB     ' low byte
symbol hINDIGO                = $48     
symbol lINDIGO                = $10     ' low byte
symbol hIVORY                 = $FF     
symbol lIVORY                 = $FE     ' low byte
symbol hKHAKI                 = $F7     
symbol lKHAKI                 = $31     ' low byte
symbol hLAVENDER              = $E7     
symbol lLAVENDER              = $3F     ' low byte
symbol hLAVENDERBLUSH         = $FF     
symbol lLAVENDERBLUSH         = $9E     ' low byte
symbol hLAWNGREEN             = $7F     
symbol lLAWNGREEN             = $E0     ' low byte
symbol hLEMONCHIFFON          = $FF     
symbol lLEMONCHIFFON          = $D9     ' low byte
symbol hLIGHTBLUE             = $AE     
symbol lLIGHTBLUE             = $DC     ' low byte
symbol hLIGHTCORAL            = $F4     
symbol lLIGHTCORAL            = $10     ' low byte
symbol hLIGHTCYAN             = $E7     
symbol lLIGHTCYAN             = $FF     ' low byte
symbol hLIGHTGOLD             = $FF     
symbol lLIGHTGOLD             = $DA     ' low byte
symbol hLIGHTGREEN            = $97     
symbol lLIGHTGREEN            = $72     ' low byte
symbol hLIGHTGREY             = $D6     
symbol lLIGHTGREY             = $9A     ' low byte
symbol hLIGHTPINK             = $FD     
symbol lLIGHTPINK             = $B8     ' low byte
symbol hLIGHTSALMON           = $FD     
symbol lLIGHTSALMON           = $0F     ' low byte
symbol hLIGHTSEAGREEN         = $25     
symbol lLIGHTSEAGREEN         = $95     ' low byte
symbol hLIGHTSKYBLUE          = $86     
symbol lLIGHTSKYBLUE          = $7F     ' low byte
symbol hLIGHTSLATEGRAY        = $74     
symbol lLIGHTSLATEGRAY        = $53     ' low byte
symbol hLIGHTSTEELBLUE        = $B6     
symbol lLIGHTSTEELBLUE        = $3B     ' low byte
symbol hLIGHTYELLOW           = $FF     
symbol lLIGHTYELLOW           = $FC     ' low byte
symbol hLIME                  = $07     
symbol lLIME                  = $E0     ' low byte
symbol hLIMEGREEN             = $36     
symbol lLIMEGREEN             = $66     ' low byte
symbol hLINEN                 = $FF     
symbol lLINEN                 = $9C     ' low byte
symbol hMAGENTA               = $F8     
symbol lMAGENTA               = $1F     ' low byte
symbol hMAROON                = $80     
symbol lMAROON                = $00     ' low byte
symbol hMEDIUMAQUAMARINE      = $66     
symbol lMEDIUMAQUAMARINE      = $75     ' low byte
symbol hMEDIUMBLUE            = $00     
symbol lMEDIUMBLUE            = $19     ' low byte
symbol hMEDIUMORCHID          = $BA     
symbol lMEDIUMORCHID          = $BA     ' low byte
symbol hMEDIUMPURPLE          = $93     
symbol lMEDIUMPURPLE          = $9B     ' low byte
symbol hMEDIUMSEAGREEN        = $3D     
symbol lMEDIUMSEAGREEN        = $8E     ' low byte
symbol hMEDIUMSLATEBLUE       = $7B     
symbol lMEDIUMSLATEBLUE       = $5D     ' low byte
symbol hMEDIUMSPRINGGREEN     = $07     
symbol lMEDIUMSPRINGGREEN     = $D3     ' low byte
symbol hMEDIUMTURQUOISE       = $4E     
symbol lMEDIUMTURQUOISE       = $99     ' low byte
symbol hMEDIUMVIOLETRED       = $C0     
symbol lMEDIUMVIOLETRED       = $B0     ' low byte
symbol hMIDNIGHTBLUE          = $18     
symbol lMIDNIGHTBLUE          = $CE     ' low byte
symbol hMINTCREAM             = $F7     
symbol lMINTCREAM             = $FF     ' low byte
symbol hMISTYROSE             = $FF     
symbol lMISTYROSE             = $3C     ' low byte
symbol hMOCCASIN              = $FF     
symbol lMOCCASIN              = $36     ' low byte
symbol hNAVAJOWHITE           = $FE     
symbol lNAVAJOWHITE           = $F5     ' low byte
symbol hNAVY                  = $00     
symbol lNAVY                  = $10     ' low byte
symbol hOLDLACE               = $FF     
symbol lOLDLACE               = $BC     ' low byte
symbol hOLIVE                 = $84     
symbol lOLIVE                 = $00     ' low byte
symbol hOLIVEDRAB             = $6C     
symbol lOLIVEDRAB             = $64     ' low byte
symbol hORANGE                = $FD     
symbol lORANGE                = $20     ' low byte
symbol hORANGERED             = $FA     
symbol lORANGERED             = $20     ' low byte
symbol hORCHID                = $DB     
symbol lORCHID                = $9A     ' low byte
symbol hPALEGOLDENROD         = $EF     
symbol lPALEGOLDENROD         = $55     ' low byte
symbol hPALEGREEN             = $9F     
symbol lPALEGREEN             = $D3     ' low byte
symbol hPALETURQUOISE         = $AF     
symbol lPALETURQUOISE         = $7D     ' low byte
symbol hPALEVIOLETRED         = $DB     
symbol lPALEVIOLETRED         = $92     ' low byte
symbol hPAPAYAWHIP            = $FF     
symbol lPAPAYAWHIP            = $7A     ' low byte
symbol hPEACHPUFF             = $FE     
symbol lPEACHPUFF             = $D7     ' low byte
symbol hPERU                  = $CC     
symbol lPERU                  = $27     ' low byte
symbol hPINK                  = $FE     
symbol lPINK                  = $19     ' low byte
symbol hPLUM                  = $DD     
symbol lPLUM                  = $1B     ' low byte
symbol hPOWDERBLUE            = $B7     
symbol lPOWDERBLUE            = $1C     ' low byte
symbol hPURPLE                = $80     
symbol lPURPLE                = $10     ' low byte
symbol hRED                   = $F8     
symbol lRED                   = $00     ' low byte
symbol hROSYBROWN             = $BC     
symbol lROSYBROWN             = $71     ' low byte
symbol hROYALBLUE             = $43     
symbol lROYALBLUE             = $5C     ' low byte
symbol hSADDLEBROWN           = $8A     
symbol lSADDLEBROWN           = $22     ' low byte
symbol hSALMON                = $FC     
symbol lSALMON                = $0E     ' low byte
symbol hSANDYBROWN            = $F5     
symbol lSANDYBROWN            = $2C     ' low byte
symbol hSEAGREEN              = $2C     
symbol lSEAGREEN              = $4A     ' low byte
symbol hSEASHELL              = $FF     
symbol lSEASHELL              = $BD     ' low byte
symbol hSIENNA                = $A2     
symbol lSIENNA                = $85     ' low byte
symbol hSILVER                = $C6     
symbol lSILVER                = $18     ' low byte
symbol hSKYBLUE               = $86     
symbol lSKYBLUE               = $7D     ' low byte
symbol hSLATEBLUE             = $6A     
symbol lSLATEBLUE             = $D9     ' low byte
symbol hSLATEGRAY             = $74     
symbol lSLATEGRAY             = $12     ' low byte
symbol hSNOW                  = $FF     
symbol lSNOW                  = $DF     ' low byte
symbol hSPRINGGREEN           = $07     
symbol lSPRINGGREEN           = $EF     ' low byte
symbol hSTEELBLUE             = $44     
symbol lSTEELBLUE             = $16     ' low byte
symbol hTAN                   = $D5     
symbol lTAN                   = $B1     ' low byte
symbol hTEAL                  = $04     
symbol lTEAL                  = $10     ' low byte
symbol hTHISTLE               = $DD     
symbol lTHISTLE               = $FB     ' low byte
symbol hTOMATO                = $FB     
symbol lTOMATO                = $08     ' low byte
symbol hTURQUOISE             = $47     
symbol lTURQUOISE             = $1A     ' low byte
symbol hVIOLET                = $EC     
symbol lVIOLET                = $1D     ' low byte
symbol hWHEAT                 = $F6     
symbol lWHEAT                 = $F6     ' low byte
symbol hWHITE                 = $FF     
symbol lWHITE                 = $FF     ' low byte
symbol hWHITESMOKE            = $F7     
symbol lWHITESMOKE            = $BE     ' low byte
symbol hYELLOW                = $FF     
symbol lYELLOW                = $E0     ' low byte
symbol hYELLOWGREEN           = $9E     
symbol lYELLOWGREEN           = $66     ' low byte

'****************************************************************************************
'                                                                                       *
'  4D Serial Sample                                                                     *
'                                                                                       *
'  Date:        14 January 2013                                                         *
'                                                                                       *
'  Description: Demonstrates Pretty much every gfx_ 4D Serial command.                  *
'               This example uses a PicAxe 08M2 connected to a 4D Display with pin 1    *
'               connected to the display's RX and pin 3 connected to the TX             *
'                                                                                       *
'               The SPE was configured for 38400 baud with a 2 milisecond delay         *
'               between bytes. This was needed to enable the PicAxe to not lose data    *
'               on its unbufferred serial. Different results may be obtained with       *
'               different chips and/or using the hardware serial ports.                 *
'                                                                                       *
'               When using PicAxe (and any other platform for that matter) any and all  *
'               Timeouts and/or Invalid Responses should be investigated and fixed.     *
'                                                                                       *
'  Because we are clocking at 32mhz all delays are 1/8 of the specified duration        *
'                                                                                       *
'****************************************************************************************
'
; set picaxe type
#picaxe 08m2
;
; open terminal after download
#terminal 38400
;
	setfreq m32

	pause	64000	; give time for terminal to start and display to get going
'
  	serout 1, T38400_32, (hF_gfx_Cls, lF_gfx_Cls) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_txt_BGcolour, lF_txt_BGcolour, hLIGHTGOLD, lLIGHTGOLD) ;           // to ensure text goesn look odd
	gosub	getAck
  	serout 1, T38400_32, (hF_txt_FGcolour, lF_txt_FGcolour, hRED, lRED) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_putstr, lF_putstr, "gfx_A to gfx_L", 0 ) ;
	gosub	getAck
	sertxd("gfx_A to gfx_L", CR, LF) ;
  	serout 1, T38400_32, (hF_txt_FGcolour, lF_txt_FGcolour, hLIME, lLIME) ;            // reset
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_ChangeColour, lF_gfx_ChangeColour, hRED, lRED, hLIME, lLIME) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Circle, lF_gfx_Circle, 0, 30, 0, 20, 0, 10, hBLUE, lBLUE) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_CircleFilled, lF_gfx_CircleFilled, 0, 60, 0, 20, 0, 10, hBLUE, lBLUE) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Rectangle, lF_gfx_Rectangle, 0, 40, 0, 50, 0, 80, 0, 60, hRED, lRED) ;  // draw a rectange to show where we are clipping
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_ClipWindow, lF_gfx_ClipWindow, 0, 40, 0, 50, 0, 80, 0, 60) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Clipping, lF_gfx_Clipping, 0 , ON4D) ;                  // turn clipping on but just use it for text
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Moveto, lF_gfx_Moveto, 0, 20, 0, 51) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_putstr, lF_putstr, "1234567890asdfghjkl", 0) ;     // this is clipped
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Clipping, lF_gfx_Clipping, 0 , OFF4D) ;
	gosub	getAck
      pause 16000
	sertxd("Display off", CR, LF) ;
  	serout 1, T38400_32, (hF_gfx_Contrast, lF_gfx_Contrast, 0, 0) ;
	gosub	getAck
	sertxd("Display on + brightness", CR, LF)
      for b27 = 1 to 16
      	serout 1, T38400_32, (hF_gfx_Contrast, LF_gfx_Contrast, 0, b27)
  		gosub	getAck
            pause 800
      next
	serout 1, T38400_32, (hF_peekB, lF_peekB, 0, GFX_XMAX)
	gosub	getAckResp
	w1 = w1 + 1	; make X resolution
  	sertxd("X Res=", #w1)
	serout 1, T38400_32, (hF_peekB, lF_peekB, 0, GFX_YMAX)
	gosub	getAckResp
	w1 = w1 + 1	; make Y resolution
  	sertxd(", Y Res=", #w1, CR, LF)
	serout 1, T38400_32, (hF_gfx_GetPixel, lF_gfx_GetPixel, 0,60, 0,20)
	gosub	getAckResp
  	sertxd("Pixel at 60,20 is ", #w1, CR, LF)
  	serout 1, T38400_32, (hF_gfx_Line, lF_gfx_Line, 0,0, 0,0, 0,100, 0,200, hBLUE, lBLUE) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_LinePattern, lF_gfx_LinePattern, 0, $aa) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Set, lF_gfx_Set, 0, OBJECT_COLOUR, hWHITE, lWHITE);
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_LineTo, lF_gfx_LineTo, 0,90, 0,40) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_LinePattern, lF_gfx_LinePattern, 0,0) ;        // reset
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_BGcolour, lF_gfx_BGcolour, lBLACK, hBLACK) ;           // reset
	gosub	getAck
  	serout 1, T38400_32, (hF_txt_BGcolour, lF_txt_BGcolour, lBLACK, hBLACK) ;           // reset
	gosub	getAck
	pause 40000
'
' gfx_M to gfx_T
'
  	serout 1, T38400_32, (hF_gfx_Cls, lF_gfx_Cls) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_putstr, lF_putstr, "gfx_M to gfx_O", 0) ;
	gosub	getAck
  	sertxd("gfx_M to gfx_O",CR,LF) ;
  	w10 = 46
  	w11 = 32
  	serout 1, T38400_32, (hF_gfx_MoveTo, lF_gfx_MoveTo, b21, b20, b23, b22);
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_CircleFilled, lF_gfx_CircleFilled, b21, b20, b23,b22, 0,5, hBLUE, lBLUE) ;
 	gosub	getAck
 	w9 = $FFa6 ' -90   // 12 o'clock position
  	do while w9 <> 270
	    	serout 1, T38400_32, (hF_gfx_Orbit, lF_gfx_Orbit, b19,b18, 0,25);
		gosub	getAck2Words
	    	w10 = 3;
	    	w8  = w9 // 90
	    	if w8 = 0 then
	    		w10 = 5;
	    	endif
	    	serout 1, T38400_32, (hF_gfx_Circle, lF_gfx_Circle, b3,b2 , b5,b4, b21,b20, hBLUE, lBLUE);
		gosub	getAck
	    	w9 = w9 + 30;   // each 30 degreees
    	loop ;

  	serout 1, T38400_32, (hF_gfx_OutlineColour, lF_gfx_OutlineColour, hYELLOW, lYELLOW) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_RectangleFilled, lF_gfx_RectangleFilled, 0,80, 0,10, 0,95, 0,60, hLIME, lLIME) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_OutlineColour, lF_gfx_OutlineColour, 0, 0) ;                    // turn outline off
	gosub	getAck
      pause 16000

  	serout 1, T38400_32, (hF_gfx_Cls, lF_gfx_Cls) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_putstr, lF_putstr, "gfx_P to gfx_P", 0) ;
	gosub	getAck
  	sertxd("gfx_P to gfx_P",CR,LF) ;
 	' house
  	serout 1, T38400_32, (hF_gfx_Rectangle, lF_gfx_Rectangle, 0,3, 0,25, 0,33, 0,55, hRED, lRED);             // frame
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Triangle, lF_gfx_Triangle, 0,3, 0,25, 0,18, 0,4, 0,33, 0,25, hYELLOW,lYELLOW);       // roof
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Polyline, lF_gfx_Polyline, 0, 4, 0,18, 0,18, 0,25, 0,25, 0,55, 0,40, 0,40, 0,55, hCYAN,lCYAN);            ' // door
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_PutPixel, lF_gfx_PutPixel, 0,20, 0,47, hLIME, lLIME) ;          // door knob
	gosub	getAck
	' man
  	serout 1, T38400_32, (hF_gfx_Circle, lF_gfx_Circle, 0,55, 0,13, 0,10, hBLUE,lBLUE);               // head
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Line, lF_gfx_Line, 0,55, 0,25, 0,55, 0,39, hBLUE,lBLUE);             // body
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Polyline, lF_gfx_Polyline, 0,3, 0,46, 0,55, 0,64, 0,63, 0,39, 0,63, hCYAN,lCYAN);      // legs
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Polyline, lF_gfx_Polyline, 0,3, 0,46, 0,55, 0,64, 0,29, 0,35, 0,29, hBLUE, lBLUE);      // arms
	gosub	getAck
	' woman
  	serout 1, T38400_32, (hF_gfx_Circle, lF_gfx_Circle, 0,80, 0,13, 0,10, hPINK,lPINK);              // head
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Polyline, lF_gfx_Polyline, 0,5, 0,80, 0,80, 0,70, 0,90, 0,80, 0,25, 0,39, 0,49, 0,49, 0,39, hBROWN,lBROWN);   // dress
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Line, lF_gfx_Line, 0,74, 0,63, 0,76, 0,49, hPINK,lPINK);          // left arm
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Line, lF_gfx_Line, 0,82, 0,49, 0,86, 0,63, hPINK,lPINK);          // right arm
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Polyline, lF_gfx_Polyline, 0,3, 0,71, 0,80, 0,89, 0,29, 0,35, 0,29, hSALMON,lSALMON);  // dress
	gosub	getAck
      pause 16000

  	serout 1, T38400_32, (hF_gfx_Cls, lF_gfx_Cls) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_putstr, lF_putstr, "gfx_P to gfx_T", 0) ;
	gosub	getAck
  	sertxd("gfx_P to gfx_T",CR,LF) ;
  	serout 1, T38400_32, (hF_gfx_Polygon, lF_gfx_Polygon, 0,7, 0,45, 0,55, 0,95, 0,60, 0,95, 0,55, 0,45, 0,20, 0,10, 0,20, 0,25, 0,30, 0,40, 0,30, hRED,lRED);
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Rectangle, lF_gfx_Rectangle, 0,0, 0,10, 0,10, 0,60, hAQUA,lAQUA) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_RectangleFilled, lF_gfx_RectangleFilled, 0,20, 0,10, 0,40, 0,60, hORANGE,lORANGE) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Transparency, lF_gfx_Transparency, 0,ON4D) ;
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_TransparentColour, lF_gfx_TransparentColour, hYELLOW, lYELLOW) ;  // how do we 'test' this?
	gosub	getAck
  	serout 1, T38400_32, (hF_gfx_Triangle, lF_gfx_Triangle, 0,50, 0,60, 0,70, 0,40, 0,90, 0,60, hYELLOW,lYELLOW);
	gosub	getAck

	sertxd("Done!", CR, LF)
loopx:goto loopx	' stop at end of tests

'
' Sample 4D Intrinsic routines, needs to be inserted into your PicAxe Program until such time as PicAxe supports includes
'
getAck:
	serin [40000,Timeout], 3, T38400_32, b1
	if b1 <> 6 then goto InvalidResponse
	return
	
getAckResp:
	serin [40000,Timeout], 3, T38400_32, b1, b3, b2
	if b1 <> 6 then goto InvalidResponse
	return
	
getAck2Words:
	serin [40000,Timeout], 3, T38400_32, b1, b3, b2, b5, b4
	if b1 <> 6 then goto InvalidResponse
	return
	
Timeout:
	sertxd("Timeout Error") 
	return
	
InvalidResponse:
	sertxd("Invalid Response ", #b1, CR, LF) ;
	return